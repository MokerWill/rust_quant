@startuml
' Vegas 指标信号获取全流程（vegas_test主链路-细节版）
title Vegas 指标信号获取全流程（vegas_test主链路-细节版）

start

:vegas_test(inst_id, time) 调用;
:获取历史K线数据 get_candle_data;
:转为 Vec<CandleItem>;
:准备参数批量 ParamMerge;

:遍历参数批量;
repeat
  :run_test_strategy(params, inst_id, time, candle_items, semaphore);
  :为每组参数循环遍历K线;
  repeat
    :get_multi_indivator_values(indicator_combine, candle_item);
    partition "指标计算" {
      :计算EMA (EmaIndicator);
      :计算成交量 (VolumeRatioIndicator);
      :计算RSI (RsiIndicator);
      :计算Bollinger (BollingerBands);
      :计算吞没形态 (KlineEngulfingIndicator);
      :计算锤子形态 (KlineHammerIndicator);
      :生成 VegasIndicatorSignalValue;
    }
    :VegasStrategy::get_trade_signal(
      candle_item_list, 
      vegas_indicator_signal_values, 
      weights, 
      risk_config
    );
    partition "信号判定" {
      :优先判断成交量信号;
      if (volume_signal.is_force_dependent && volume_ratio < volume_decrease_ratio) then (是)
        :返回无信号;
        note right: 跳过本次循环
        break
      endif

      :检查EMA2突破条件;
      :检查EMA趋势排列与回调;
      :检查RSI信号;
      :检查Bollinger信号;
      :检查吞没形态信号;
      :检查锤子形态信号;
      :收集所有信号条件 SignalCondition;
      :权重配置 SignalWeightsConfig 计算得分;
      :判断是否达到最小总权重 min_total_weight;
      if (达到) then (是)
        :判定多头/空头方向;
        if (should_buy) then (是)
          :设置买入信号;
          :记录信号详情;
        elseif (should_sell) then (是)
          :设置卖出信号;
          :记录信号详情;
        endif
      endif
    }
    :deal_signal(trading_state, signal, candle, risk_config, candle_item_list, i);
    partition "风控与持仓管理" {
      if (有持仓) then (是)
        :检查止损/动态止盈/信号K线止损;
        if (触发止损/止盈) then (是)
          :平仓，记录交易;
        endif
      endif
      if (should_buy) then (是)
        if (无持仓) then (是)
          :开多仓，记录交易;
        elseif (持有空单) then (是)
          :平空单，开多仓，记录交易;
        endif
      elseif (should_sell) then (是)
        if (无持仓) then (是)
          :开空仓，记录交易;
        elseif (持有多单) then (是)
          :平多单，开空仓，记录交易;
        endif
      endif
    }
  repeatwhile (未遍历完K线)
repeatwhile (未遍历完参数)

:输出/保存信号结果（SignalResult、TradeRecord、BackTestResult）;
stop

footer Vegas 指标信号全流程（vegas_test -> run_test_strategy -> get_multi_indivator_values -> get_trade_signal -> deal_signal）
@enduml 